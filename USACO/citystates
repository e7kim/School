import java.io.*;
import java.util.*;

public class citystate implements Comparable<citystate>{
	
	private String city;
	private String state;
	
	public citystate() {
	}
	
	public citystate(String city) {
		this.city = city;
	}
	
	public String getCity() {
		return city;
	}
	
	public void setState(String state) {
		this.state = state;
	}
	
	public String getState() {
		return state;
	}
	
	public int compareTo(citystate other) {
		int compare = city.compareTo(other.city);
		if (compare == 0)
			return state.compareTo(other.state);
		return compare;
	}
	
	public static void main(String[] args) throws Exception{
		Scanner in = new Scanner(new File("citystate.in"));
		PrintWriter out = new PrintWriter(new File("citystate.out"));
		int n = in.nextInt();
		citystate[] cityStates = new citystate[n];
		for (int i = 0; i < n; i++)
		{
			cityStates[i] = new citystate(in.next().substring(0, 2));
			cityStates[i].setState(in.next());
		}
		in.close();
		
		Arrays.sort(cityStates);
		
		System.out.println("Ci" + " " + "St\n");
		for (int i = 0; i < n; i++)
			System.out.println(i + " " + cityStates[i].getCity() + " " + cityStates[i].getState());
		
		int count = 0;
		
		for (int i = 0; i < n; i++) 
		{
			int search = binarySearchCity(cityStates, i);
			System.out.println(i + " " + search);
			if (search >= 0)
			{
				count++;
				System.out.println("count has increased!");
				int back = search;
				int forward = search;
				while (back - 1 != -1 && cityStates[back - 1].compareTo(cityStates[search]) == 0)
				{
					back -= 1;
					count++;
					System.out.println("count has increased!");
				}
				while (forward + 1 != n && cityStates[forward + 1].compareTo(cityStates[search]) == 0)
				{
					forward += 1;
					count++;
					System.out.println("count has increased!");
				}
			}
		}
		
		System.out.println(cityStates[5].compareTo(cityStates[4]));
		
		out.println(count/2);
		out.close();
	}
	public static int binarySearchCity(citystate[] array, int i)
	{	
		int L = 0, R = array.length-1;
		while(L <= R)
		{
			int M = L + (R-L)/2;
			String city = array[M].getCity();
			String state = array[i].getState();
			if (city.equals(state))
			{
				System.out.println("City has been found!");
				M = binarySearchState(array, M, i);
				return M;
			}
			else if (city.compareTo(state) < 0)
			{
				L = M + 1;
			}
			else if (city.compareTo(state) > 0)
			{
				R = M - 1;
			}
		}
		return -1;
	}
	public static int binarySearchState(citystate[] array, int M, int i)
	{
		int L = M;
		int R = M;
		String searchedCity = array[M].getCity();
		while (L - 1 != -1 && array[L-1].getCity().equals(searchedCity))
		{
			L -= 1;
		}
		while (R + 1 != array.length && array[R+1].getCity().equals(searchedCity))
		{
			R += 1;
		}
		while(L <= R)
		{
			M = L + (R-L)/2;
			System.out.println(M);
			String thisCity = array[i].getCity();
			String searchState = array[M].getState();
			if (searchState.equals(thisCity))
			{
				return M;
			}
			else if (searchState.compareTo(thisCity) < 0)
			{
				L = M + 1;
			}
			else if (searchState.compareTo(thisCity) > 0)
			{
				R = M - 1;
			}
		}
		return -2;
	}

}
